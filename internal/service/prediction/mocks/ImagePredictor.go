// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	predict "github.com/pdstuber/isit-a-cat/pkg/predict"
	mock "github.com/stretchr/testify/mock"
)

// ImagePredictor is an autogenerated mock type for the ImagePredictor type
type ImagePredictor struct {
	mock.Mock
}

// PredictImage provides a mock function with given fields: imageBytes
func (_m *ImagePredictor) PredictImage(imageBytes []byte) (*predict.Result, error) {
	ret := _m.Called(imageBytes)

	if len(ret) == 0 {
		panic("no return value specified for PredictImage")
	}

	var r0 *predict.Result
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (*predict.Result, error)); ok {
		return rf(imageBytes)
	}
	if rf, ok := ret.Get(0).(func([]byte) *predict.Result); ok {
		r0 = rf(imageBytes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*predict.Result)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(imageBytes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Stop provides a mock function with given fields:
func (_m *ImagePredictor) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewImagePredictor creates a new instance of ImagePredictor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewImagePredictor(t interface {
	mock.TestingT
	Cleanup(func())
}) *ImagePredictor {
	mock := &ImagePredictor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
